@page "/"
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

<div class="d-flex justify-content-center mt-2">
    <h3>Having a bad day?</h3>
</div>
<div class="d-flex justify-content-center mt-2">
    <button class="btn btn-outline-success" @onclick="Callback">@_clickMessage</button>
</div>
<div class="d-flex justify-content-center mt-4">
    @if (_mediaSelected is not null)
    {
        <iframe src="https://www.instagram.com/p/@(_mediaSelected.Id)/embed"
                width="540"
                height="600"
                frameborder="0"
                scrolling="no"
                allowtransparency>
        </iframe>
    }
</div>

@code {
    private Post[]? _posts;

    Post? _mediaSelected;

    string _clickMessage = "Click here !";

    protected override async Task OnInitializedAsync()
    {
        _posts = await Http.GetFromJsonAsync<Post[]>("data/Medias.json");
    }

    private async Task Callback()
    {
        if (_posts is null)
        {
            return;
        }

        var rand = new Random();

        _mediaSelected = _posts[rand.Next(_posts.Length)];

        if (_mediaSelected.Type == TypeMedia.Instagram)
        {
            await RefreshInstagramEmbeds();
        }

        _clickMessage = "Click here again!";
    }

    private async Task RefreshInstagramEmbeds()
    {
        await JsRuntime.InvokeVoidAsync("refreshInstagramEmbed");
    }

    public class Post
    {
        public string Name { get; init; }
        public string Id { get; init; }
        public string Url { get; init; }
        public TypeMedia Type { get; init; }
    }

    public enum TypeMedia
    {
        Video = 1,
        Image = 2,
        Instagram = 3
    }

}