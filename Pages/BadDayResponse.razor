@page "/"
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

<div class="d-flex justify-content-center mt-2">
    <h3>Having a bad day?</h3>
</div>

<div class="d-flex justify-content-center mt-2">
    <button class="btn btn-outline-success" @onclick="NewPost">@_clickMessage</button>
</div>
@if (_mediaSelected is not null)
{
    <div class="d-flex justify-content-center mt-4">

        <iframe src="https://www.instagram.com/p/@(_mediaSelected.Id)/embed"
                width="540"
                height="600"
                frameborder="0"
                scrolling="no"
                allowtransparency>
        </iframe>
    </div>
    <div class="d-flex justify-content-center mt-4">
        <button class="btn btn-outline-secondary m-1" @onclick="@(() => _isRevealId = !_isRevealId)">Reveal Id</button>
        <div>@(_isRevealId ? _mediaSelected.Id : "")</div>
    </div>
}

<button class="btn btn-outline-secondary m-1" @onclick="Test">Run Random List</button>

<textarea class="form-control" aria-multiline="true" rows="70" @bind="@_logs"></textarea>

@code {
    private List<Post> _posts = [];
    private List<Post> _postRandomize = [];

    private Post? _mediaSelected;

    private string _clickMessage = "Click here !";
    private string _logs = "";
    private int _compteur;
    private bool _isRevealId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _posts = await Http.GetFromJsonAsync<List<Post>>("data/Medias.json") ?? [];

        RandomizePosts();
        WriteLog();
    }

    private async Task NewPost()
    {
        _isRevealId = false;

        if (_postRandomize.Count == 0)
        {
            RandomizePosts();
        }

        _mediaSelected = _postRandomize.FirstOrDefault();
        if (_mediaSelected is not null)
        {
            _postRandomize.Remove(_mediaSelected);
        }

        // WriteLog();

        await RefreshInstagramEmbeds();

        _clickMessage = "Click here again!";
    }

    private void Test()
    {
        _compteur++;

        RandomizePosts();
        WriteLog();
    }

    private void RandomizePosts()
    {
        _postRandomize = _posts.ToList();

        var random = new Random();
        _postRandomize = _posts.OrderBy(_ => random.Next()).ToList();
        // Random.Shared.Shuffle(_postRandomize.ToArray());
    }

    private void WriteLog()
    {
        var logPost = string.Join("\n", _posts.Select(p => $"Id: {p.Id}"));
        var logsRandom = string.Join("\n", _postRandomize.Select(p => $"Id: {p.Id}"));

        _logs = $"{_compteur} \n\n {logPost} \n\n ------------------------------- \n\n {logsRandom}";
    }

    private async Task RefreshInstagramEmbeds()
    {
        await JsRuntime.InvokeVoidAsync("refreshInstagramEmbed");
    }

    public class Post
    {
        public string Name { get; init; }
        public string Id { get; init; }
        public string Url { get; init; }
        public int Type { get; init; }
    }

}

